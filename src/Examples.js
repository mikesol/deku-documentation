export const unMemoizedApplicationURL = "module Examples.UnMemoizedApplication where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (intercalate, replicate)\nimport Data.Tuple (fst, snd)\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.NonEmpty ((<**>))\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  aa <- useState true\n  bb <- useState false\n  cc <- useState true\n  dd <- useState false\n  ee <- useState true\n  D.div_\n    [ D.div_\n        ( map\n            ( \\i -> D.a\n                [ click $ snd i <#> not >>> fst i\n                , klass \"cursor-pointer\"\n                ]\n                [ text \"Click me \" ]\n            )\n            [ aa, bb, cc, dd, ee ]\n        )\n    , D.div_\n        ( replicate 10\n            ( D.div_\n                [ text $\n                    ( { a: _, b: _, c: _, d: _, e: _ }\n                        <$> snd aa\n                        <**> snd bb\n                        <**> snd cc\n                        <**> snd dd\n                        <**> snd ee\n                    )\n                      <#> \\{ a, b, c, d, e } ->\n                        intercalate \" \" $ map show\n                          [ a, b, c, d, e ]\n                ]\n            )\n        )\n    ]\n";
export const filteringAnEventURL = "module Examples.FilteringAnEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Filterable (filter)\nimport Data.NonEmpty (tail)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setNumber /\\ number <- useState 50.0\n  D.div_\n    [ D.input (slider setNumber) []\n    , D.div_\n        [ text \"Latest less than 50: \"\n        , text (filter (_ < 50.0) (tail number) <#> show)\n        ]\n    , D.div_\n        [ text \"Latest greater than 50: \"\n        , text (filter (_ > 50.0) (tail number) <#> show)\n        ]\n    ]\n";
export const usingTheOriginalEventURL = "module Examples.UsingTheOriginalEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Newtype (unwrap)\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Attribute ((:=), cb)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nimport Web.Event.Event (type_)\nimport Web.HTML (window)\nimport Web.HTML.Window (alert)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody\n  ( D.span\n      [ D.OnClick := cb \\e -> do\n          window >>= alert (unwrap (type_ e))\n      , klass \"cursor-pointer\"\n      ]\n      [ text \"Click me!\" ]\n  )\n";
export const usingTheHookToSwitchBetweenElementsURL = "module Examples.UsingTheHookToSwitchBetweenElements where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, (<#~>))\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\ndata Element = Image | Video | SVG\n\nbunny :: String\nbunny = \"https://dl8.webmfiles.org/big-buck-bunny_trailer.webm\"\n\npic :: String\npic = \"https://picsum.photos/150\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setImageType /\\ imageType <- useState Image\n  D.div_\n    [ D.div_\n        [ imageType <#~>\n            case _ of\n              Image -> D.img [ D.Src := pic ] []\n              Video -> D.video\n                [ D.Controls := \"controls\"\n                , D.Preload := \"none\"\n                , D.Width := \"250\"\n                , D.Height := \"250\"\n                , D.Autoplay := \"true\"\n                ]\n                [ D.source\n                    [ D.Src := bunny\n                    , D.Xtype := \"video/webm\"\n                    ]\n                    []\n                ]\n              SVG -> D.svg\n                [ D.Height := \"170\"\n                , D.Width := \"170\"\n                ]\n                [ D.circle\n                    [ D.Cx := \"75\"\n                    , D.Cy := \"75\"\n                    , D.R := \"70\"\n                    , D.Stroke := \"black\"\n                    , D.StrokeWidth := \"3\"\n                    , D.Fill := \"red\"\n                    ]\n                    []\n                ]\n        ]\n    , D.div_\n        [ D.button\n            [ klass $ buttonClass \"amber\"\n            , click $ setImageType Image\n            ]\n            [ text \"Image\" ]\n        , D.button\n            [ klass $ buttonClass \"cyan\"\n            , click $ setImageType Video\n            ]\n            [ text \"Video\" ]\n        , D.button\n            [ klass $ buttonClass \"green\"\n            , click $ setImageType SVG\n            ]\n            [ text \"SVG\" ]\n        ]\n    ]\n";
export const rowPolymorphismAndProvidersURL = "module Examples.RowPolymorphismAndProviders where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Monad.Reader (ask, asks)\nimport Data.Newtype (class Newtype, unwrap)\nimport Deku.Control (text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nlibAwesome\n  :: forall n r\n   . Newtype n\n       { libAwesome ::\n           { s1 :: String\n           , s2 :: String\n           , cont :: n -> Nut\n           }\n       | r\n       }\n  => n\n  -> Nut\nlibAwesome = do\n  { libAwesome: { s1, s2, cont } } <- asks unwrap\n  c <- cont\n  pure $ D.div_\n    [ D.div__ (\"Lib awesome says: \" <> s1)\n    , D.div__ (\"Lib awesome also says: \" <> s2)\n    , c\n    ]\n\nlibGreat\n  :: forall n r\n   . Newtype n\n       { libGreat ::\n           { x1 :: String }\n       | r\n       }\n  => n\n  -> Nut\nlibGreat = do\n  { libGreat: { x1 } } <- asks unwrap\n  pure $ D.div_\n    [ D.div__ (\"Lib great says: \" <> x1)\n    ]\n\nnewtype Env = Env\n  { libGreat ::\n      { x1 :: String }\n  , libAwesome ::\n      { s1 :: String\n      , s2 :: String\n      , cont :: Env -> Nut\n      }\n  , interjection :: String\n  }\n\nderive instance Newtype (Env) _\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  let\n    cont = do\n      lg <- libGreat\n      Env { interjection } <- ask\n      pure $ D.div_\n        ( [ D.div_ [ text interjection ]\n          , lg\n          ]\n        )\n  Env\n    { interjection: \"Oh and...\"\n    , libAwesome:\n        { s1: \"I'm awesome!\"\n        , s2: \"Heck yeah!\"\n        , cont\n        }\n    , libGreat: { x1: \"I'm great!\" }\n    } # do\n    awe <- libAwesome\n    pure $ D.div_ [ text \"In all honesty...\", awe ]\n";
export const addingAttributesURL = "module Examples.AddingAttributes where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody\n  ( D.div_\n      [ D.span\n          [ D.Style := \"color:teal;\" ]\n          [ text \"I exist\" ]\n      , D.ul_ $ map D.li__ [ \"A\", \"B\", \"C\" ]\n      , D.div_\n          [ D.h3\n              [ D.Id := \"my-id\"\n              , D.Style := \"background-color:silver;\"\n              ]\n\n              [ text \"foo\" ]\n          , D.i [ klass \"text-2xl\" ] [ text \"bar\" ]\n          , text \" \"\n          , D.b__ \"baz\"\n          ]\n      ]\n  )\n";
export const biasingASideOfSamplingURL = "module Examples.BiasingASideOfSampling where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (fixed)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event.Class ((<|**>), (<|*>), (<**|>), (<*|>))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setSlider /\\ sliderE <- useState'\n  fixed\n    [ D.div [ klass \"flex justify-around\" ]\n        [ D.input (slider setSlider) [] ]\n    , text\n        ( sliderE <|**>\n            ((\\a b -> show b <> \" \" <> show a) <$> sliderE)\n        )\n    , D.br_ []\n    , text\n        ( sliderE <**|>\n            ((\\a b -> show b <> \" \" <> show a) <$> sliderE)\n        )\n    , D.br_ []\n    , text\n        ( ((\\a b -> show a <> \" \" <> show b) <$> sliderE)\n            <|*> sliderE\n        )\n    , D.br_ []\n    , text\n        ( ((\\a b -> show a <> \" \" <> show b) <$> sliderE)\n            <*|> sliderE\n        )\n    ]\n";
export const samplingABehaviorAndDiscardingTheEventURL = "module Examples.SamplingABehaviorAndDiscardingTheEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Affjax.ResponseFormat as ResponseFormat\nimport Affjax.Web as AX\nimport Control.Monad.ST.Class (liftST)\nimport Control.Monad.ST.Internal (new, read, write)\nimport Data.Argonaut.Core (stringifyWithIndent)\nimport Data.Either (Either(..))\nimport Data.Tuple (Tuple(..))\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (error, killFiber, launchAff)\nimport FRP.Behavior (behavior, sample_)\nimport FRP.Event.Time (interval)\nimport Fetch (Method(..))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i <- interval 2000\n  runInBody do\n    text\n      ( sample_\n          ( behavior\n              ( do\n                  fiber <- new (pure unit)\n                  value <- new \"Fetching...\"\n                  pure $ Tuple (pure unit) do\n                    fb <- launchAff do\n                      f <- liftST $ read fiber\n                      killFiber (error \"cancelling\") f\n                      result <- AX.request\n                        ( AX.defaultRequest\n                            { url = \"https://randomuser.me/api/\"\n                            , method = Left GET\n                            , responseFormat = ResponseFormat.json\n                            }\n                        )\n                      let ff s = liftST $ void $ write s value\n                      case result of\n                        Left err -> ff (AX.printError err)\n                        Right response -> ff\n                          (stringifyWithIndent 2 response.body)\n                    liftST $ void $ write fb fiber\n                    o <- liftST $ read value\n                    pure (\"Here's a random user: \" <> o)\n              )\n          )\n\n          i.event\n      )\n";
export const behaviorsVersusFlappingURL = "module Examples.BehaviorsVersusFlapping where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple (Tuple(..))\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Effect.Random (random)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Behavior (behavior, sample)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i <- interval 250\n  runInBody do\n    D.div_\n      [ D.p_\n          [ text\n              ( show <$> sample\n                  (behavior (pure (Tuple (pure unit) random)))\n                  (i.event $> add 42.0)\n              )\n          ]\n      , D.p_\n          [ text\n              ( show <$> ((i.event $> add 42.0) <@> 3.1416)\n              )\n          ]\n      ]\n";
export const aWayToMemoizeURL = "module Examples.AWayToMemoize where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Alternative as Alt\nimport Data.NonEmpty ((:|))\nimport Data.String (replaceAll, Pattern(..), Replacement(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guardWith, useState, useState')\nimport Deku.Listeners (click)\nimport Deku.NonEmpty (rehead)\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Effect.Random (random)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Behavior (sampleBy, stepNE)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"ml-4 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = do\n  n <- random\n  runInBody Deku.do\n    setNumber /\\ number <- useState n\n    setPresence /\\ presence <- useState'\n    D.div_\n      [ D.div_\n          [ text $ number <#> show >>>\n              (\"Here's a random number: \" <> _)\n          ]\n      , D.div_\n          [ D.button\n              [ klass $ buttonClass \"pink\"\n              , click $ random >>= setNumber\n              ]\n              [ text \"A\" ]\n          , D.button\n              [ klass $ buttonClass \"green\"\n              , click $ false :| presence <#> not >>> setPresence\n              ]\n              [ text \"B\" ]\n          ]\n      , D.div_\n          [ guardWith\n              (sampleBy (\\v b -> Alt.guard b $> v) (stepNE number) presence)\n              \\v ->\n                text $ rehead v number <#> show >>>\n                  (\"Here's the same random number: \" <> _)\n          ]\n      ]\n";
export const injectingDependenciesURL = "module Examples.InjectingDependencies where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Int (floor)\nimport Data.JSDate (getTime, now)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, (<#~>))\nimport Deku.Listeners (click)\nimport Deku.Pursx ((~~))\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (Milliseconds(..), delay, launchAff_)\nimport Effect.Class (liftEffect)\nimport Effect.Random (random)\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\ndata UIState\n  = Beginning\n  | Loading\n  | Image { url :: String, watcherCount :: Int }\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  let\n    fetchNewRandomImage = do\n      delay (Milliseconds 300.0)\n      n <- liftEffect (getTime <$> now)\n      c <- liftEffect random\n      pure $\n        { url: \"https://picsum.photos/seed/\" <> show n <> \"/200\"\n        , watcherCount: floor (c * 4200.0)\n        }\n    decreaseImageWatchCount _ = do\n      delay (Milliseconds 300.0)\n      c <- liftEffect random\n      pure $ { watcherCount: floor (c * 4200.0) }\n  setUIState /\\ uiState <- useState Beginning\n  D.div_\n    [ D.button\n        [ klass buttonClass\n        , let\n            fetcher = do\n              newRandomImage <- fetchNewRandomImage\n              liftEffect $ setUIState $ Image newRandomImage\n            loader = liftEffect $ setUIState Loading\n          in\n            click $ uiState <#> case _ of\n              Beginning -> do\n                launchAff_ do\n                  loader\n                  fetcher\n              Loading -> pure unit\n              Image { url } ->\n                launchAff_ do\n                  loader\n                  _ <- decreaseImageWatchCount url\n                  fetcher\n        ]\n        [ text $ uiState <#> case _ of\n            Beginning -> \"Get Image\"\n            _ -> \"Change Image\"\n        ]\n    , D.div_\n        [ uiState <#~> case _ of\n            Beginning -> mempty\n            Image { url, watcherCount } -> D.div_\n              [ D.img [ D.Src := url ] []\n              , D.div_\n                  [ text $\n                      \"Watcher count (including you): \" <> show\n                        watcherCount\n                  ]\n              ]\n            Loading ->\n              D.div [ klass \"p-10\" ]\n                [ ((Proxy :: _ Loading) ~~ {}) ]\n        ]\n    ]\n\ntype Loading =\n  \"\"\"<div role=\"status\">\n    <svg aria-hidden=\"true\" class=\"mr-2 w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"currentColor\"/>\n        <path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentFill\"/>\n    </svg>\n    <span class=\"sr-only\">Loading...</span>\n</div>\"\"\"\n";
export const compactingEventsURL = "module Examples.CompactingEvents where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Alt ((<|>))\nimport Data.Filterable (compact)\nimport Data.Maybe (Maybe(..))\nimport Data.NonEmpty ((:|))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event (Event)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setLeft /\\ left <- useState'\n  setRight /\\ right <- useState'\n  let\n    eventMaker\n      :: forall b c\n       . (Event b -> Event c)\n      -> (Event Number -> Event b)\n      -> (Event Number -> Event b)\n      -> Event c\n    eventMaker f l r = f (l left <|> r right)\n  D.div_\n    [ D.input ([ klass \"mr-2\" ] <> slider setLeft) []\n    , D.input (slider setRight) []\n    , D.div_\n        [ text \"Responds to both channels: \"\n        , text $ show <$> (50.0 :| (eventMaker identity identity identity))\n        ]\n    , D.div_\n        [ text \"Only responds to the left channel: \"\n        , text $ show <$>\n            ( 50.0 :|\n                (eventMaker compact (Just <$> _) (_ $> Nothing))\n            )\n        ]\n    ]\n";
export const emptyUntilFullURL = "module Examples.EmptyUntilFull where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Random (random)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setNumber /\\ number <- useState'\n  D.div_\n    [ D.button\n        [ klass buttonClass\n        , click $ random >>= setNumber\n        ]\n        [ text \"Update number\" ]\n    , text $ number <#>\n        show >>> (\"Here's a random number: \" <> _)\n    ]\n";
export const runSSRURL = "module Examples.RunSSR where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Monad.ST.Class (liftST)\nimport Deku.Attribute ((:=))\nimport Deku.Control (text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody', runSSR)\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nhtmlCode :: String -> Nut\nhtmlCode code = D.pre [ D.Class := \"prism-code language-markup\" ]\n  [ D.code_ [ text code ] ]\n\nmyApp :: String -> Nut\nmyApp s = D.div_\n  [ D.h4__ \"Hi!\"\n  , D.div__ \"Here's some HTML for a Deku app:\"\n  , htmlCode s\n  ]\n\nmain :: Effect Unit\nmain = do\n  txt <- liftST $ runSSR (myApp \"hello\")\n  runInBody do myApp txt\n";
export const aSimpleComponentURL = "module Examples.ASimpleComponent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Control (text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody mySimpleComponent\n  where\n  -- `Nut` is the type of Deku components\n  mySimpleComponent :: Nut\n  mySimpleComponent =\n    D.div_\n      [ D.span__ \"I exist\"\n      , D.ul_ $ map D.li__ [ \"A\", \"B\", \"C\" ]\n      , D.div_\n          [ D.h3__ \"foo\"\n          , D.i__ \"bar\"\n          , text \" \"\n          , D.b__ \"baz\"\n          ]\n      ]\n";
export const addingSeveralElementsToPursxURL = "module Examples.AddingSeveralElementsToPursx where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Attribute (Attribute, class Attr)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (fixed)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Effect (Effect)\nimport Deku.Listeners (click)\nimport Deku.Pursx ((~~))\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\nliHtml =\n  ( Proxy\n      :: Proxy\n           \"\"\"<li ~atts~>\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\" aria-current=\"page\">~name~</span>\n      </div>\n    </li>\"\"\"\n  )\n\nmyHtml =\n  ( Proxy\n      :: Proxy\n           \"\"\"<nav class=\"flex\" aria-label=\"Breadcrumb\">\n  <ol role=\"list\" class=\"flex space-x-4 rounded-md bg-white px-6 shadow\">\n    <li ~homeAtts~>\n      <div class=\"flex items-center\">\n        <span class=\"cursor-pointer text-gray-400 hover:text-gray-500\">\n          <!-- Heroicon name: mini/home -->\n          <svg class=\"h-5 w-5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z\" clip-rule=\"evenodd\" />\n          </svg>\n          <span class=\"sr-only cursor-pointer\">Home</span>\n        </span>\n      </div>\n    </li>\n\n    ~lis~\n  </ol>\n</nav>\"\"\"\n  )\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setProjects /\\ projects <- useState true\n  setNero /\\ nero <- useState true\n  let\n    hideOnFalse e =\n      klass $ e <#> (if _ then \"\" else \"hidden \") >>>\n        (_ <> \"flex\")\n\n    toggleHome\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleHome = click (setProjects false *> setNero false)\n\n    toggleProjs\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleProjs = click (setProjects true *> setNero false)\n\n    toggleNero\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleNero = click (setProjects true *> setNero true)\n  D.div_\n    [ D.div_\n        [ D.a [ klass \"cursor-pointer mr-4\", toggleHome ]\n            [ text \"Go home\" ]\n        , D.a [ klass \"cursor-pointer mr-4\", toggleProjs ]\n            [ text \"Go to projects\" ]\n        , D.a [ klass \"cursor-pointer\", toggleNero ]\n            [ text \"Go to nero\" ]\n        ]\n    , D.div_\n        [ myHtml ~~\n            { homeAtts: [ toggleHome, klass \"flex h-12\" ]\n            , lis: fixed\n                [ liHtml ~~\n                    { atts: [ toggleProjs, hideOnFalse projects ]\n                    , name: text \"Projects\"\n                    }\n                , liHtml ~~\n                    { atts: [ toggleNero, hideOnFalse nero ]\n                    , name: text \"Project Nero\"\n                    }\n                ]\n            }\n        ]\n    ]\n";
export const useMailboxedURL = "module Examples.UseMailboxed where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array ((..))\nimport Data.NonEmpty ((:|))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useMailboxed, useState)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setInt /\\ int <- useState 0\n  setMailbox /\\ mailbox <- useMailboxed\n  D.div_\n    [ D.button\n        [ klass buttonClass\n        , click $ int <#> \\i -> do\n            setMailbox { address: i, payload: unit }\n            setInt ((i + 1) `mod` 100)\n        ]\n        [ text \"Bang!\" ]\n    , D.div_\n        ( (0 .. 99) <#> \\n -> D.span\n            [ klass $ (false :| (mailbox n $> true)) <#>\n                if _ then \"\" else \"hidden\"\n            ]\n            [ text\n                ( ( if n == 99 then \"We're done here\"\n                    else show n\n                  ) <> \" \"\n                )\n            ]\n        )\n    ]\n";
export const addingAnAttributeToPursxURL = "module Examples.AddingAnAttributeToPursx where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.Pursx ((~~))\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\nmyHtml =\n  ( Proxy\n      :: Proxy\n           \"\"\"<nav class=\"flex\" aria-label=\"Breadcrumb\">\n  <ol role=\"list\" class=\"flex space-x-4 rounded-md bg-white px-6 shadow\">\n    <li class=\"flex\">\n      <div class=\"flex items-center\">\n        <span class=\"cursor-pointer text-gray-400 hover:text-gray-500\">\n          <!-- Heroicon name: mini/home -->\n          <svg class=\"h-5 w-5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z\" clip-rule=\"evenodd\" />\n          </svg>\n          <span class=\"sr-only cursor-pointer\">Home</span>\n        </span>\n      </div>\n    </li>\n\n    <li ~projectsHidden~>\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\">Projects</span>\n      </div>\n    </li>\n\n    <li ~neroHidden~>\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\" aria-current=\"page\">Project Nero</span>\n      </div>\n    </li>\n  </ol>\n</nav>\"\"\"\n  )\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setProjects /\\ projects <- useState true\n  setNero /\\ nero <- useState true\n  let\n    hideOnFalse e =\n      klass $ e <#> (if _ then \"\" else \"hidden \") >>>\n        (_ <> \"flex\")\n    point = klass \"cursor-pointer mr-4\"\n    toggleHome =\n      [ point\n      , click (setProjects false *> setNero false)\n      ]\n    toggleProjects =\n      [ point\n      , click (setProjects true *> setNero false)\n      ]\n    toggleNero =\n      [ point\n      , click (setProjects true *> setNero true)\n      ]\n  D.div_\n    [ D.div_\n        [ D.a toggleHome [ text \"Go home\" ]\n        , D.a toggleProjects [ text \"Go to projects\" ]\n        , D.a toggleNero [ text \"Go to nero\" ]\n        ]\n    , D.div_\n        [ myHtml ~~\n            { projectsHidden: [ hideOnFalse projects ]\n            , neroHidden: [ hideOnFalse nero ]\n            }\n        ]\n    ]\n";
export const componentsAsSemigroupsURL = "module Examples.ComponentsAsSemigroups where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState)\nimport Deku.Listeners (click)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setAstuce /\\ astuce <- useState true\n  D.div_\n    [ D.div [ klass \"space-x-2\" ]\n        [ D.button\n            [ klass $ buttonClass \"indigo\"\n            , click $ setAstuce true\n            ]\n            [ text \"Sage\" ]\n        , D.button\n            [ klass $ buttonClass \"green\"\n            , click $ setAstuce false\n            ]\n            [ text \"Pas sage\" ]\n        ]\n    , D.div_\n        [ D.p__ \"Cher ami,\"\n            <> D.p__ \"Je suis toute \u00e9mue de vous dire que j'ai\"\n            <> guard astuce\n              (D.p__ \"bien compris l'autre jour que vous aviez\")\n            <> D.p__ \"toujours une envie folle de me faire\"\n            <> guard astuce\n              (D.p__ \"danser. Je garde le souvenir de votre\")\n            <> D.p__ \"baiser et je voudrais bien que ce soit\"\n            <> guard astuce\n              (D.p__ \"une preuve que je puisse \u00eatre aim\u00e9e\")\n            <> D.p__ \"par vous. Je suis pr\u00eate \u00e0 montrer mon\"\n            <> guard astuce\n              (D.p__ \"affection toute d\u00e9sint\u00e9ress\u00e9e et sans cal-\")\n            <> D.p__ \"cul, et si vous voulez me voir ainsi\"\n            <> guard astuce\n              (D.p__ \"vous d\u00e9voiler, sans artifice, mon \u00e2me\")\n            <> D.p__ \"toute nue, daignez me faire visite,\"\n            <> guard astuce\n              (D.p__ \"nous causerons et en amis franchement\")\n            <> D.p__ \"je vous prouverai que je suis la femme\"\n            <> guard astuce\n              (D.p__ \"sinc\u00e8re, capable de vous offrir l'affection\")\n            <> D.p__ \"la plus profonde, comme la plus \u00e9troite\"\n            <> guard astuce\n              (D.p__ \"amiti\u00e9, en un mot : la meilleure \u00e9pouse\")\n            <> D.p__ \"dont vous puissiez r\u00eaver. Puisque votre\"\n            <> guard astuce\n              (D.p__ \"\u00e2me est libre, pensez que l'abandon ou je\")\n            <> D.p__ \"vis est bien long, bien dur et souvent bien\"\n            <> guard astuce\n              (D.p__ \"insupportable. Mon chagrin est trop\")\n            <> D.p__ \"gros. Accourrez bien vite et venez me le\"\n            <> guard astuce\n              (D.p__ \"faire oublier. \u00c0 vous je veux me sou-\")\n            <> D.p__ \"mettre enti\u00e8rement.\"\n            <> D.p__ \"Votre poup\u00e9e\"\n        ]\n    ]\n";
export const groupsOfGroupsURL = "module Examples.GroupsOfGroups where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Assets (alexanderURL)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (fixed)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\ndata AlexandersDay = Bad | Worse | Worst\n\nderive instance Eq AlexandersDay\nderive instance Ord AlexandersDay\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setBadness /\\ badness <- useState Bad\n  D.div_\n    [ D.div [ klass \"flex justify-between\" ]\n        [ D.button\n            [ klass $ buttonClass \"indigo\"\n            , click $ setBadness Bad\n            ]\n            [ text \"Bad\" ]\n        , D.button\n            [ klass $ buttonClass \"pink\"\n            , click $ setBadness Worse\n            ]\n            [ text \"Worse\" ]\n        , D.button\n            [ klass $ buttonClass \"green\"\n            , click $ setBadness Worst\n            ]\n            [ text \"Worst\" ]\n        ]\n    , D.div [ klass \"bg-alexander\" ]\n        [ D.div [ klass \"p-3\" ]\n            [ D.span\n                [ klass \"font-aldine text-4xl text-alexander\" ]\n                [ text\n                    \"Alexander and the Terrible, Horrible,\"\n                , guard (badness <#> (_ > Bad)) $ fixed\n                    [ text \" Dreadful,\"\n                    , guard (badness <#> (_ > Worse)) $ fixed\n                        [ text \" Hideous,\"\n                        , text \" Soul-crushing,\"\n                        ]\n                    , text \" Ruinous,\"\n                    ]\n                , text \" No Good,\"\n                , text \" Very Bad Day\"\n                ]\n            ]\n        , D.div_ [ D.img [ D.Src := alexanderURL ] [] ]\n        ]\n    ]\n";
export const theOneOfFunctionURL = "module Examples.TheOneOfFunction where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Either (hush)\nimport Data.Foldable (oneOf)\nimport Data.NonEmpty ((:|))\nimport Data.Tuple (snd)\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event (delay, filterMap)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  let\n    ms = 967\n    loop = 16 * ms\n  ivl <- interval loop\n  let\n    beat w t = filterMap (hush >>> map snd)\n      $ delay (t * ms) (ivl.event $> w)\n  runInBody do\n    text $ \"Work it\" :| oneOf\n      [ beat \"Work it\" 0\n      , beat \"Make it\" 1\n      , beat \"Do it\" 2\n      , beat \"Makes us\" 3\n      , beat \"Harder\" 8\n      , beat \"Better\" 9\n      , beat \"Faster\" 10\n      , beat \"Stronger\" 11\n      ]\n";
export const theGlobalPortalSyntaxURL = "module Examples.TheGlobalPortalSyntax where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.NonEmpty (NonEmpty)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (globalPortal1, text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState)\nimport Deku.Listeners (click)\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Event (Event)\nimport Deku.Toplevel (runInBody)\n\ndata Square = TL | BL | TR | BR\n\nderive instance Eq Square\n\nmoveSpriteHere\n  :: { video :: Nut\n     , square :: NonEmpty Event Square\n     , setSquare :: Square -> Effect Unit\n     , at :: Square\n     }\n  -> Nut\nmoveSpriteHere { video, square, setSquare, at } = D.a\n  [ click (setSquare at)\n  , D.Class :=\n      \"block max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\"\n  ]\n  [ D.h5\n      [ D.Class :=\n          \"cursor-pointer mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\"\n      ]\n      [ text \"Move sprite here\"\n      , guard (square <#> (_ == at)) video\n      ]\n  ]\n\nmyVideo :: Nut\nmyVideo = D.video\n  [ D.Width := \"175\"\n  , D.Height := \"175\"\n  , D.Autoplay := \"true\"\n  , D.Loop := \"true\"\n  , D.Muted := \"true\"\n  ]\n  [ D.source\n      [ D.Src := \"https://media.giphy.com/media/IMSq59ySKydYQ/giphy.mp4\" ]\n      []\n  ]\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  vid <- globalPortal1 myVideo\n  setSquare /\\ square <- useState TL\n  D.div [ klass \"grid grid-cols-2\" ]\n    [ moveSpriteHere { video: vid, square, setSquare, at: TL }\n    , moveSpriteHere { video: vid, square, setSquare, at: TR }\n    , moveSpriteHere { video: vid, square, setSquare, at: BL }\n    , moveSpriteHere { video: vid, square, setSquare, at: BR }\n    ]\n";
export const customHook1URL = "module Examples.CustomHook1 where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Control (text)\nimport Deku.Core (Hook)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  let\n    myFortyTwoHook :: Hook String\n    myFortyTwoHook makeHook = makeHook \"forty-two\"\n  fortyTwo <- myFortyTwoHook\n  D.div_\n    [ text fortyTwo ]\n";
export const gatingEventsOnBehaviorsURL = "module Examples.GatingEventsOnBehaviors where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Alt ((<|>))\nimport Data.DateTime.Instant (unInstant)\nimport Data.Newtype (unwrap)\nimport Data.Number ((%))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (gateBy)\nimport FRP.Behavior.Time (instant)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i0 <- interval 200\n  i1 <- interval 165\n  runInBody do\n    D.div\n      [ klass\n          ( gateBy\n              (\\t _ -> (unwrap $ unInstant t) % 4000.0 < 2000.0)\n              instant\n              ( (i0.event $> \"bg-pink-300\") <|>\n                  (i1.event $> \"bg-green-300\")\n              )\n          )\n      ]\n      [ text \"Par-tay!\" ]\n";
export const effectsInSSRURL = "module Examples.EffectsInSSR where\n\nimport Prelude\nimport Effect (Effect)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Monad.ST.Class (liftST)\nimport Data.NonEmpty ((:|))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody', runSSR)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nhtmlCode :: String -> Nut\nhtmlCode code = D.pre [ D.Class := \"prism-code language-markup\" ]\n  [ D.code_\n      [ text code\n      ]\n  ]\n\nmyApp :: String -> Nut\nmyApp s = Deku.do\n  setImage /\\ image <- useState'\n  D.div_\n    [ D.h4__ \"Hi!\"\n    , D.a\n        [ klass \"cursor-pointer\"\n        , click $ (setImage unit) :| (image $> pure unit)\n        ]\n        [ text \"Click to reveal an image.\" ]\n    , guard (image $> true)\n        (D.img [ D.Src := \"https://picsum.photos/150\" ] [])\n    , htmlCode s\n    ]\n\nmain :: Effect Unit\nmain = do\n  res <- liftST $ runSSR (myApp \"innnceeeppption\")\n  runInBody (myApp res)\n";
export const usingFunctionsAsMonadsURL = "module Examples.UsingFunctionsAsMonads where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Monad.Reader (ask)\nimport Data.NonEmpty (NonEmpty)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (NutWith)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Event (Event)\nimport Deku.Toplevel (runInBody)\n\ntype Env =\n  { isSignedIn :: NonEmpty Event Boolean\n  , setIsSignedIn :: Boolean -> Effect Unit\n  }\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\ntype AppMonad = NutWith Env\n\nsignIn :: AppMonad\nsignIn = do\n  { setIsSignedIn, isSignedIn } <- ask\n  pure $ D.button\n    [ klass buttonClass\n    , click $ isSignedIn <#> not >>> setIsSignedIn\n    ]\n    [ text $ isSignedIn <#> if _ then \"Sign out\" else \"Sign in\" ]\n\nname :: AppMonad\nname = do\n  { isSignedIn } <- ask\n  pure $ D.td_ [ text $ isSignedIn <#> if _ then \"Mike\" else \"Nobody\" ]\n\nbalance :: AppMonad\nbalance = do\n  { isSignedIn } <- ask\n  pure $ D.td_ [ text $ isSignedIn <#> if _ then \"42 bucks\" else \"No money\" ]\n\ntable :: AppMonad\ntable = do\n  myName <- name\n  myBalance <- balance\n  pure $ D.table_\n    [ D.tr_ [ D.th__ \"Name\", D.th__ \"Balance\" ]\n    , D.tr_ [ myName, myBalance ]\n    ]\n\nfullApp :: AppMonad\nfullApp = do\n  mySignIn <- signIn\n  myTable <- table\n  pure $ D.div_ [ D.div_ [ mySignIn ], D.div_ [ myTable ] ]\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setIsSignedIn /\\ isSignedIn <- useState false\n  fullApp { setIsSignedIn, isSignedIn }\n";
export const theKeepLatestFunctionURL = "module Examples.TheKeepLatestFunction where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Alt ((<|>))\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event (fold, keepLatest)\nimport FRP.Event.Class (once)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i0 <- interval 1600\n  i1 <- interval 600\n  runInBody do\n    let count = fold (pure <$> add 1) 0\n    text\n      ( show <$> keepLatest\n          ( i0.event $>\n              ((once i0.event $> 0) <|> count i1.event)\n          )\n      )\n";
export const aSimpleCounterURL = "module Examples.ASimpleCounter where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport Deku.NonEmpty (thisThen)\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Event (fold)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setCount /\\ count <- useState'\n  D.div_\n    [ D.button\n        [ klass buttonClass\n        , click $ count <#> (add 1 >>> setCount)\n        ]\n        [ text \"Increment\" ]\n    , D.div_\n        [ text \"Counter 1 using state hooks: \"\n        , text (show <$> count)\n        ]\n    , D.div_\n        [ text \"Counter 2 using \"\n        , D.code__ \"fold\"\n        , text \": \"\n        , text (show <$> thisThen 0 (flip (fold (pure <$> add 1)) count))\n        ]\n    ]\n";
export const globalHandlersURL = "module Examples.GlobalHandlers where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Monad.ST.Class (liftST)\nimport Data.Int (floor)\nimport Deku.Control (text)\nimport Effect (Effect)\nimport Effect.Random (random)\nimport Effect.Ref (new, read, write)\nimport Effect.Timer (setTimeout)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Event (create)\nimport Deku.Toplevel (runInBody)\n\ndoAuth :: (Boolean -> Effect Unit) -> Effect (Effect Unit)\ndoAuth f = do\n  onOff <- new true\n  let\n    eff tf = do\n      oo <- read onOff\n      when oo do\n        f tf\n        t <- random\n        void $ setTimeout (floor $ t * 3000.0) (eff (not tf))\n  eff false\n  pure $ write false onOff\n\nmain :: Effect Unit\nmain = do\n  authEvent <- liftST create\n  u <- runInBody\n    ( text $ authEvent.event <#>\n        if _ then \"Welcome back!\" else \"Please log in.\"\n    )\n  _ <- doAuth authEvent.push\n  pure u\n";
export const addingSeveralAttributesToPursxURL = "module Examples.AddingSeveralAttributesToPursx where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (class Attr, Attribute)\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.Pursx ((~~))\nimport Effect (Effect)\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\nmyHtml =\n  ( Proxy\n      :: Proxy\n           \"\"\"<nav class=\"flex\" aria-label=\"Breadcrumb\">\n  <ol role=\"list\" class=\"flex space-x-4 rounded-md bg-white px-6 shadow\">\n    <li ~homeAtts~>\n      <div class=\"flex items-center\">\n        <span class=\"cursor-pointer text-gray-400 hover:text-gray-500\">\n          <!-- Heroicon name: mini/home -->\n          <svg class=\"h-5 w-5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z\" clip-rule=\"evenodd\" />\n          </svg>\n          <span class=\"sr-only cursor-pointer\">Home</span>\n        </span>\n      </div>\n    </li>\n\n    <li ~projectsAtts~>\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\">Projects</span>\n      </div>\n    </li>\n\n    <li ~neroAtts~>\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\" aria-current=\"page\">Project Nero</span>\n      </div>\n    </li>\n  </ol>\n</nav>\"\"\"\n  )\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setProjects /\\ projects <- useState true\n  setNero /\\ nero <- useState true\n  let\n    hideOnFalse e =\n      klass $ e <#> (if _ then \"\" else \"hidden \") >>>\n        (_ <> \"flex\")\n\n    toggleHome\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleHome = click (setProjects false *> setNero false)\n\n    toggleProjs\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleProjs = click (setProjects true *> setNero false)\n\n    toggleNero\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleNero = click (setProjects true *> setNero true)\n    akls = append [ klass \"cursor-pointer mr-4\" ] <<< pure\n  D.div_\n    [ D.div_\n        [ D.a (akls toggleHome) [ text \"Go home\" ]\n        , D.a (akls toggleProjs) [ text \"Go to projects\" ]\n        , D.a (akls toggleNero) [ text \"Go to nero\" ]\n        ]\n    , D.div_\n        [ myHtml ~~\n            { homeAtts: [ toggleHome, klass \"flex h-12\" ]\n            , projectsAtts: [ toggleProjs, hideOnFalse projects ]\n            , neroAtts: [ toggleNero, hideOnFalse nero ]\n            }\n        ]\n    ]\n";
export const samplingABehaviorWithAnEventURL = "module Examples.SamplingABehaviorWithAnEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Affjax.ResponseFormat as ResponseFormat\nimport Affjax.Web as AX\nimport Control.Monad.ST.Class (liftST)\nimport Control.Monad.ST.Internal (new, read, write)\nimport Data.Argonaut.Core (stringifyWithIndent)\nimport Data.Either (Either(..))\nimport Data.Tuple (Tuple(..))\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (error, killFiber, launchAff)\nimport FRP.Behavior (behavior, sample)\nimport FRP.Event.Time (interval)\nimport Fetch (Method(..))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i <- interval 2000\n  runInBody do\n    text\n      ( sample\n          ( behavior\n              ( do\n                  fiber <- new (pure unit)\n                  value <- new \"Fetching...\"\n                  pure $ Tuple (pure unit) do\n                    fb <- launchAff do\n                      f <- liftST $ read fiber\n                      killFiber (error \"cancelling\") f\n                      result <- AX.request\n                        ( AX.defaultRequest\n                            { url = \"https://randomuser.me/api/\"\n                            , method = Left GET\n                            , responseFormat = ResponseFormat.json\n                            }\n                        )\n                      let ff s = liftST $ void $ write s value\n                      case result of\n                        Left err -> ff (AX.printError err)\n                        Right response -> ff\n                          (stringifyWithIndent 2 response.body)\n                    liftST $ void $ write fb fiber\n                    liftST $ read value\n              )\n          )\n\n          (i.event $> (\"Here's a random user: \" <> _))\n      )\n";
export const useRefURL = "module Examples.UseRef where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (replicate)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useRefNE, useState)\nimport Deku.Listeners (click, slider)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-pink-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-pink-700 focus:outline-none focus:ring-2\nfocus:ring-pink-500 focus:ring-offset-2 m-2\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  let initial = 50.0\n  setNum /\\ num <- useState initial\n  intRef <- useRefNE num\n  D.div_\n    [ D.input (slider setNum)\n        []\n    , D.div [ klass \"grid grid-flow-row grid-cols-3\" ]\n        ( replicate 24 Deku.do\n            setButtonText /\\ buttonText <- useState \"Waiting...\"\n            D.button\n              [ klass buttonClass\n              , click $ intRef >>= show >>> setButtonText\n              ]\n              [ text buttonText ]\n        )\n    ]\n";
export const runningAffsWithCancellationInResponseToAnEventURL = "module Examples.RunningAffsWithCancellationInResponseToAnEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (error, killFiber, launchAff)\nimport Effect.Class (liftEffect)\nimport Fetch (Method(..), fetch)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setResponse /\\ response <- useState'\n  setFiber /\\ fiber <- useState (pure unit)\n  D.div_\n    [ D.a\n        [ click $ fiber <#> \\f -> setFiber =<< launchAff do\n            killFiber (error \"Who needed that request?\") f\n            { text: t } <- fetch \"https://httpbin.org/post\"\n              { method: POST\n              , body: \"\"\"{\"hello\":\"world\"}\"\"\"\n              , headers: { \"Content-Type\": \"application/json\" }\n              }\n            t' <- t\n            liftEffect $ setResponse t'\n\n        , klass \"cursor-pointer\"\n        ]\n        [ text \"Click for a random http response\" ]\n    , text \": \"\n    , text (show <$> response)\n    ]\n";
export const knowThySelfTURL = "module Examples.KnowThySelfT where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Toplevel (runInBody)\n\nimport Web.HTML.HTMLInputElement (value)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm \"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setTxt /\\ txt <- useState'\n  setInput /\\ input <- useState'\n  D.div_\n    [ D.input\n        [ klass inputKls\n        , D.OnInput := (input <#> \\i -> (value i >>= setTxt))\n        , D.SelfT := setInput\n        ]\n        []\n    , D.div_ [ text txt ]\n    ]\n";
export const shorthandListenersURL = "module Examples.ShorthandListeners where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.DOM as D\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Class.Console (logShow)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody\n  (D.input (slider logShow) [])\n";
export const aNoteOnMemoizationURL = "module Examples.ANoteOnMemoization where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.String (replaceAll, Pattern(..), Replacement(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, guard)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Random (random)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"ml-4 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = do\n  n <- random\n  runInBody Deku.do\n    setNumber /\\ number <- useState n\n    setPresence /\\ presence <- useState false\n    D.div_\n      [ D.div_\n          [ text $ number <#> show >>>\n              (\"Here's a random number: \" <> _)\n          ]\n      , D.div_\n          [ D.button\n              [ klass $ buttonClass \"pink\"\n              , click $ random >>= setNumber\n              ]\n              [ text \"A\" ]\n          , D.button\n              [ klass $ buttonClass \"green\"\n              , click $ presence <#> not >>> setPresence\n              ]\n              [ text \"B\" ]\n          ]\n      , D.div_\n          [ guard presence\n              $ text\n              $ number <#> show >>>\n                  (\"Here's the same random number: \" <> _)\n          ]\n      ]\n";
export const addingCustomElementsURL = "module Examples.AddingCustomElements where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.These (These(..))\nimport Deku.Attribute (class Attr, AttributeValue(..), unsafeAttribute, (:=))\nimport Deku.Control (text)\nimport Deku.DOM (unsafeCustomElement)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\ndata MyNiftyAnchor_\n\ndata MyPages = JoyrideFM | MikeSolomonOrg\ndata MyTarget = Blank\n\ninstance Attr MyNiftyAnchor_ D.Href MyPages where\n  attr _ JoyrideFM = unsafeAttribute $ This\n    { key: \"href\", value: Prop' \"https://joyride.fm\" }\n  attr _ MikeSolomonOrg = unsafeAttribute $ This\n    { key: \"href\", value: Prop' \"https://mikesolomon.org\" }\n\ninstance Attr MyNiftyAnchor_ D.Target MyTarget where\n  attr _ _ = unsafeAttribute $ This\n    { key: \"target\", value: Prop' \"_blank\" }\n\nmain :: Effect Unit\nmain = runInBody do\n  unsafeCustomElement \"a\" (Proxy :: _ MyNiftyAnchor_)\n    [ D.Href := JoyrideFM\n    , D.Target := Blank\n    ]\n    [ text \"hi\" ]\n";
export const componentsAsMonoidsURL = "module Examples.ComponentsAsMonoids where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (drop, intercalate, zipWith)\nimport Data.FunctorWithIndex (mapWithIndex)\nimport Data.Lens (over)\nimport Data.Lens.Index (ix)\nimport Data.String (Pattern(..), split)\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nlyrics :: Array String\nlyrics = split (Pattern \"\\n\")\n  \"\"\"Twelve drummers drumming\nEleven pipers piping\nTen lords a-leaping\nNine ladies dancing\nEight maids a-milking\nSeven swans a-swimming\nSix geese a-laying\nFive golden rings\nFour calling birds\nThree french hens\nTwo turtle doves\nA partridge in a pear tree\"\"\"\n\ntextColors :: Array String\ntextColors = split (Pattern \"\\n\")\n  \"\"\"text-lime-400\ntext-red-400\ntext-sky-400\ntext-purple-400\ntext-emerald-400\ntext-stone-400\ntext-pink-400\ntext-yellow-400\ntext-indigo-400\ntext-zinc-400\ntext-amber-400\ntext-neutral-400\"\"\"\n\ntoWord :: Int -> String\ntoWord 1 = \"first\"\ntoWord 2 = \"second\"\ntoWord 3 = \"third\"\ntoWord 4 = \"fourth\"\ntoWord 5 = \"fifth\"\ntoWord 6 = \"sixth\"\ntoWord 7 = \"seventh\"\ntoWord 8 = \"eighth\"\ntoWord 9 = \"ninth\"\ntoWord 10 = \"tenth\"\ntoWord 11 = \"eleventh\"\ntoWord 12 = \"twelfth\"\ntoWord _ = \"nth\"\n\nmain :: Effect Unit\nmain = runInBody do\n  let\n    styleF s t = D.span [ klass s ] [ text t ]\n    zipStyles = zipWith styleF textColors\n    lyrics0 = zipStyles lyrics\n    lyrics1 = zipStyles (over (ix 11) (\"and \" <> _) lyrics)\n  D.div_\n    [ D.ol_\n        ( lyrics # mapWithIndex \\i _ ->\n            D.p_\n              [ text \"On the \"\n                  <> text (toWord (i + 1))\n                  <> text\n                    \" day of Christmas my true love gave to me: \"\n                  <> intercalate (text \", \")\n                    ( drop (11 - i) $\n                        if i == 0 then lyrics0 else lyrics1\n                    )\n                  <> text \".\"\n              ]\n        )\n    ]\n";
export const aLagUsingFixURL = "module Examples.ALagUsingFix where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Compactable (compact)\nimport Data.Maybe (Maybe(..))\nimport Data.NonEmpty ((:|))\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple (Tuple(..), fst, snd)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport FRP.Behavior (sample, step)\nimport FRP.Event (fix)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2 mr-4\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setWord /\\ word <- useState'\n  let\n    button txt color = D.button\n      [ klass (buttonClass color), click (setWord txt) ]\n      [ text txt ]\n  D.div_\n    [ D.div_\n        [ button \"Hickory\" \"green\"\n        , button \"Dickory\" \"pink\"\n        , button \"Dock\" \"indigo\"\n        ]\n    , D.div_\n        [ text \"Previous word: \"\n        , text $ \"None\" :|\n            ( compact $ snd <$> fix\n                ( \\e -> sample\n                    (step Nothing (fst <$> e))\n                    ((Tuple <<< Just) <$> word)\n                )\n            )\n        ]\n    ]\n";
export const addingASingleElementToPursxURL = "module Examples.AddingASingleElementToPursx where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (Attribute, class Attr)\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.Pursx ((~~))\nimport Effect (Effect)\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\nliHtml =\n  ( Proxy\n      :: Proxy\n           \"\"\"<li ~atts~>\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\" aria-current=\"page\">~name~</span>\n      </div>\n    </li>\"\"\"\n  )\n\nmyHtml =\n  ( Proxy\n      :: Proxy\n           \"\"\"<nav class=\"flex\" aria-label=\"Breadcrumb\">\n  <ol role=\"list\" class=\"flex space-x-4 rounded-md bg-white px-6 shadow\">\n    <li ~homeAtts~>\n      <div class=\"flex items-center\">\n        <span class=\"cursor-pointer text-gray-400 hover:text-gray-500\">\n          <!-- Heroicon name: mini/home -->\n          <svg class=\"h-5 w-5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z\" clip-rule=\"evenodd\" />\n          </svg>\n          <span class=\"sr-only cursor-pointer\">Home</span>\n        </span>\n      </div>\n    </li>\n\n    ~projectLi~\n    ~neroLi~\n  </ol>\n</nav>\"\"\"\n  )\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setProjects /\\ projects <- useState true\n  setNero /\\ nero <- useState true\n  let\n    hideOnFalse e =\n      klass $ e <#> (if _ then \"\" else \"hidden \") >>>\n        (_ <> \"flex\")\n\n    toggleHome\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleHome = click (setProjects false *> setNero false)\n\n    toggleProjs\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleProjs = click (setProjects true *> setNero false)\n\n    toggleNero\n      :: forall element\n       . Attr element D.OnClick (Effect Unit)\n      => Attribute element\n    toggleNero = click (setProjects true *> setNero true)\n\n  D.div_\n    [ D.div_\n        [ D.a [ klass \"cursor-pointer mr-4\", toggleHome ]\n            [ text \"Go home\" ]\n        , D.a [ klass \"cursor-pointer mr-4\", toggleProjs ]\n            [ text \"Go to projects\" ]\n        , D.a [ klass \"cursor-pointer\", toggleNero ]\n            [ text \"Go to nero\" ]\n        ]\n    , D.div_\n        [ myHtml ~~\n            { homeAtts: [ toggleHome, klass \"flex h-12\" ]\n            , projectLi:\n                liHtml ~~\n                  { atts: [ toggleProjs, hideOnFalse projects ]\n                  , name: text \"Projects\"\n                  }\n            , neroLi:\n                liHtml ~~\n                  { atts: [ toggleNero, hideOnFalse nero ]\n                  , name: text \"Project Nero\"\n                  }\n            }\n        ]\n    ]\n";
export const plainOldHtmlURL = "module Examples.PlainOldHtml where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Pursx ((~~))\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\nmyHtml =\n  Proxy\n    :: Proxy\n         \"\"\"<nav class=\"flex\" aria-label=\"Breadcrumb\">\n  <ol role=\"list\" class=\"flex space-x-4 rounded-md bg-white px-6 shadow\">\n    <li class=\"flex\">\n      <div class=\"flex items-center\">\n        <span class=\"cursor-pointer text-gray-400 hover:text-gray-500\">\n          <!-- Heroicon name: mini/home -->\n          <svg class=\"h-5 w-5 flex-shrink-0\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M9.293 2.293a1 1 0 011.414 0l7 7A1 1 0 0117 11h-1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-3a1 1 0 00-1-1H9a1 1 0 00-1 1v3a1 1 0 01-1 1H5a1 1 0 01-1-1v-6H3a1 1 0 01-.707-1.707l7-7z\" clip-rule=\"evenodd\" />\n          </svg>\n          <span class=\"sr-only cursor-pointer\">Home</span>\n        </span>\n      </div>\n    </li>\n\n    <li class=\"flex\">\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\">Projects</span>\n      </div>\n    </li>\n\n    <li class=\"flex\">\n      <div class=\"flex items-center\">\n        <svg class=\"h-full w-6 flex-shrink-0 text-gray-200\" viewBox=\"0 0 24 44\" preserveAspectRatio=\"none\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n          <path d=\"M.293 0l22 22-22 22h1.414l22-22-22-22H.293z\" />\n        </svg>\n        <span class=\"cursor-pointer ml-4 text-sm font-medium text-gray-500 hover:text-gray-700\" aria-current=\"page\">Project Nero</span>\n      </div>\n    </li>\n  </ol>\n</nav>\"\"\"\n\nmain :: Effect Unit\nmain = runInBody (myHtml ~~ {})\n";
export const usingAnEffectURL = "module Examples.UsingAnEffect where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Attribute ((:=))\nimport Deku.Toplevel (runInBody)\n\nimport Web.HTML (window)\nimport Web.HTML.Window (alert)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody\n  ( D.span\n      [ D.OnClick := do\n          window >>= alert \"Thanks for clicking!\"\n      , klass \"cursor-pointer\"\n      ]\n      [ text \"Click me!\" ]\n  )\n";
export const knowThySelfURL = "module Examples.KnowThySelf where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.String.Utils (words)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (Milliseconds(..), delay, launchAff_)\nimport Effect.Class (liftEffect)\nimport Web.DOM.Element (toParentNode)\nimport Web.DOM.HTMLCollection as HTMLCollection\nimport Web.DOM.ParentNode (children)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setLength /\\ length <- useState'\n  D.div\n    [ D.Self := \\e -> launchAff_ do\n        delay (Milliseconds 0.0)\n        liftEffect do\n          kids <- children (toParentNode e)\n          HTMLCollection.length kids >>= setLength\n    ]\n    ( (words \"I have this many kids:\" <#> D.div__) <>\n        [ D.div_ [ text (show <$> length) ] ]\n    )\n";
export const unsafePursxURL = "module Examples.UnsafePursx where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Pursx ((~!~))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody (\"<h4>(un)safe!</h4>\" ~!~ {})\n";
export const runningAffsSequentiallyInResponseToAnEventURL = "module Examples.RunningAffsSequentiallyInResponseToAnEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (joinFiber, launchAff, try)\nimport Effect.Class (liftEffect)\nimport Fetch (Method(..), fetch)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setResponse /\\ response <- useState'\n  setFiber /\\ fiber <- useState (pure unit)\n  D.div_\n    [ D.a\n        [ click $ fiber <#> \\f -> setFiber =<< launchAff do\n            _ <- try $ joinFiber f\n            { text: t } <- fetch \"https://httpbin.org/post\"\n              { method: POST\n              , body: \"\"\"{\"hello\":\"world\"}\"\"\"\n              , headers: { \"Content-Type\": \"application/json\" }\n              }\n            t' <- t\n            liftEffect $ setResponse t'\n\n        , klass \"cursor-pointer\"\n        ]\n        [ text \"Click for a random http response\" ]\n    , text \": \"\n    , text (show <$> response)\n    ]\n";
export const theLocalPortalSyntaxURL = "module Examples.TheLocalPortalSyntax where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.NonEmpty (NonEmpty)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (portal1, text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState)\nimport Deku.Listeners (click)\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Event (Event)\nimport Deku.Toplevel (runInBody)\n\ndata Square = TL | BL | TR | BR\n\nderive instance Eq Square\n\nmoveSpriteHere\n  :: { video :: Nut\n     , square :: NonEmpty Event Square\n     , setSquare :: Square -> Effect Unit\n     , at :: Square\n     }\n  -> Nut\nmoveSpriteHere { video, square, setSquare, at } = D.a\n  [ click (setSquare at)\n  , D.Class :=\n      \"block max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\"\n  ]\n  [ D.h5\n      [ D.Class :=\n          \"cursor-pointer mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\"\n      ]\n      [ text \"Move sprite here\"\n      , guard (square <#> (_ == at)) video\n      ]\n  ]\n\nmyVideo :: Nut\nmyVideo = D.video\n  [ D.Width := \"175\"\n  , D.Height := \"175\"\n  , D.Autoplay := \"true\"\n  , D.Loop := \"true\"\n  , D.Muted := \"true\"\n  ]\n  [ D.source\n      [ D.Src := \"https://media.giphy.com/media/IMSq59ySKydYQ/giphy.mp4\" ]\n      []\n  ]\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  vid <- portal1 myVideo\n  setSquare /\\ square <- useState TL\n  D.div [ klass \"grid grid-cols-2\" ]\n    [ moveSpriteHere { video: vid, square, setSquare, at: TL }\n    , moveSpriteHere { video: vid, square, setSquare, at: TR }\n    , moveSpriteHere { video: vid, square, setSquare, at: BL }\n    , moveSpriteHere { video: vid, square, setSquare, at: BR }\n    ]\n";
export const unsettingAttributesURL = "module Examples.UnsettingAttributes where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Alternative (guard)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.NonEmpty (filterMapAttribute)\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"ml-4 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setStyleSwitch /\\ styleSwitch <- useState false\n  D.div_\n    [ D.a\n        [ D.Target := \"_blank\"\n        , filterMapAttribute D.Style (\\x -> guard x $> \"color:magenta;\") styleSwitch\n        , filterMapAttribute D.Style (\\x -> guard (not x) $> unit) $ styleSwitch\n        ]\n        [ text \"Click me\" ]\n    , D.button\n        [ klass $ buttonClass \"pink\"\n        , click $ styleSwitch <#> not >>> setStyleSwitch\n        ]\n        [ text \"Switch style\" ]\n    ]\n";
export const howSamplingWorksURL = "module Examples.HowSamplingWorks where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (fixed)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event.Class ((<|**>))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setSlider1 /\\ slider1 <- useState'\n  setSlider2 /\\ slider2 <- useState'\n  fixed\n    [ D.div [ klass \"flex justify-around\" ]\n        [ D.input (slider setSlider1) []\n        , D.input (slider setSlider2) []\n        ]\n    , text\n        ( slider1 <|**>\n            ((\\a b -> show b <> \" \" <> show a) <$> slider2)\n        )\n    ]\n";
export const unlockingLevelsURL = "module Examples.UnlockingLevels where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Plus (empty)\nimport Data.NonEmpty (NonEmpty, (:|))\nimport Data.String (replaceAll, Pattern(..), Replacement(..))\nimport Data.Tuple (Tuple(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (globalPortal1, portal1, text)\nimport Deku.Core (Nut)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState, (<#~>))\nimport Deku.Listeners (click)\nimport Deku.NonEmpty (rehead)\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Behavior (sampleStepping)\nimport FRP.Event (Event)\nimport Web.HTML.HTMLMediaElement (play)\nimport Web.HTML.HTMLVideoElement (toHTMLMediaElement)\nimport Deku.Toplevel (runInBody)\n\ndata Square = TL | BL | TR | BR\n\nderive instance Eq Square\n\nmoveSpriteHere\n  :: { video :: Nut\n     , square :: NonEmpty Event Square\n     , setSquare :: Square -> Effect Unit\n     , at :: Square\n     }\n  -> Nut\nmoveSpriteHere { video, square, setSquare, at } = D.a\n  [ click (setSquare at)\n  , D.Class :=\n      \"block max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow-md hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\"\n  ]\n  [ D.h5\n      [ D.Class :=\n          \"cursor-pointer mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\"\n      ]\n      [ text \"Move sprite here\"\n      , guard (square <#> (_ == at)) video\n      ]\n  ]\n\nvid2URL :: WhichVideo -> String\nvid2URL Video1 = \"https://media.giphy.com/media/IMSq59ySKydYQ/giphy.mp4\"\nvid2URL Video2 = \"https://media.giphy.com/media/3o6UB7jHQYIjeh5IGY/giphy.mp4\"\nvid2URL Video3 = \"https://media.giphy.com/media/12GbJUnssN6NTa/giphy.mp4\"\nvid2URL Video4 = \"https://media.giphy.com/media/7T8LajxmBkz8gmYcRB/giphy.mp4\"\n\nmyVideo :: NonEmpty Event Boolean -> String -> Nut\nmyVideo bang vid = D.video\n  [ D.Width := \"175\"\n  , D.Height := \"175\"\n  , D.Autoplay := \"true\"\n  , D.Loop := \"true\"\n  , D.Muted := \"true\"\n  , D.SelfT :=\n      ( bang <#> \\tf e ->\n          if not tf then pure unit\n          else do\n            let melt = toHTMLMediaElement e\n            play melt\n      )\n  ]\n  [ D.source [ D.Src := vid ] []\n  ]\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mr-4 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\ndata WhichVideo = Video1 | Video2 | Video3 | Video4\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setVideoURL /\\ videoURL <- useState Video1\n  setGlobalVideoPresence /\\ globalVideoPresence <- useState true\n  let\n    rotator Video1 = Video2\n    rotator Video2 = Video3\n    rotator Video3 = Video4\n    rotator Video4 = Video1\n  globalVid <- globalPortal1\n    ( myVideo (true :| empty)\n        \"https://media.giphy.com/media/3o6Zt6GFP75DlxnDXy/giphy.mp4\"\n    )\n  D.div_\n    [ D.div [ klass \"flex\" ]\n        [ guard globalVideoPresence $ D.button\n            [ klass $ buttonClass \"indigo\"\n            , click $ videoURL <#> rotator >>> setVideoURL\n            ]\n            [ text \"Shuffle video\" ]\n        , D.button\n            [ klass $ buttonClass \"indigo\"\n            , click $ globalVideoPresence <#> not >>>\n                setGlobalVideoPresence\n            ]\n            [ text $ globalVideoPresence <#>\n                if _ then \"Send this video down ->\"\n                else \"Bring video back up\"\n            ]\n        , guard globalVideoPresence globalVid\n        ]\n    , D.div_\n        [ sampleStepping globalVideoPresence (Tuple <$> videoURL) <#~>\n            \\(Tuple v gvp) -> Deku.do\n              let globalVideo = rehead gvp globalVideoPresence\n              vid <- portal1 (myVideo globalVideo (vid2URL v))\n\n              setSquare /\\ square <- useState TL\n              let\n                switchable = globalVideo <#~>\n                  if _ then vid else globalVid\n              D.div [ klass \"grid grid-cols-2\" ]\n                [ moveSpriteHere\n                    { video: switchable, square, setSquare, at: TL }\n                , moveSpriteHere\n                    { video: switchable, square, setSquare, at: TR }\n                , moveSpriteHere\n                    { video: switchable, square, setSquare, at: BL }\n                , moveSpriteHere\n                    { video: switchable, square, setSquare, at: BR }\n                ]\n        ]\n    ]\n";
export const useDynURL = "module Examples.UseDyn where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Foldable (for_)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useDynAtBeginning_, useState')\nimport Deku.Listeners (click, keyUp)\nimport Deku.Toplevel (runInBody)\n\nimport Web.Event.Event (target)\nimport Web.HTML (window)\nimport Web.HTML.HTMLInputElement (fromEventTarget, value)\nimport Web.HTML.Window (alert)\nimport Web.UIEvent.KeyboardEvent (code, toEvent)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm\"\"\"\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setItem /\\ item <- useState'\n  setInput /\\ input <- useState'\n  let\n    guardAgainstEmpty e = do\n      v <- value e\n      if v == \"\" then\n        window >>= alert \"Item cannot be empty\"\n      else setItem v\n    top =\n      D.div_\n        [ D.input\n            [ D.Value := \"Tasko primo\"\n            , keyUp \\evt -> do\n                when (code evt == \"Enter\") $\n                  for_\n                    ( (target >=> fromEventTarget)\n                        (toEvent evt)\n                    )\n                    guardAgainstEmpty\n            , D.SelfT := setInput\n            , klass inputKls\n            ]\n            []\n        , D.button\n            [ click $ input <#> guardAgainstEmpty\n            , klass $ buttonClass \"green\"\n            ]\n            [ text \"Add\" ]\n        ]\n  D.div_\n    [ top\n    , Deku.do\n        { value: t } <- useDynAtBeginning_ item\n        D.div_ [ text t ]\n    ]\n";
export const runningEffectsInResponseToEventsURL = "module Examples.RunningEffectsInResponseToEvents where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.JSDate (getTime, now)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setCurrentTime /\\ currentTime <- useState'\n  D.div_\n    [ D.a\n        [ click (getTime <$> now >>= setCurrentTime)\n        , klass \"cursor-pointer\"\n        ]\n        [ text \"Current timestamp\" ]\n    , text \": \"\n    , text (show <$> currentTime)\n    ]\n";
export const integratingBehaviorsURL = "module Examples.IntegratingBehaviors where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Time.Duration (Seconds(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (integral', sample_, stepNE)\nimport FRP.Behavior.Time (seconds)\nimport FRP.Event.AnimationFrame (animationFrame)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  af <- animationFrame\n  runInBody Deku.do\n    setNumber /\\ number <- useState 0.0\n    D.div_\n      [ D.div_\n          [ D.input\n              ( slider setNumber <>\n                  [ klass \"w-full\"\n                  , D.Min := \"0.0\"\n                  , D.Max := \"1.0\"\n                  , D.Step := \"0.01\"\n                  , D.Value := \"0.0\"\n                  ]\n              )\n              []\n          ]\n      , D.div_\n          [ text\n              ( show <$>\n                  ( ( sample_\n                        ( integral' 0.0\n                            (seconds <#> (\\(Seconds s) -> s))\n                            (stepNE number)\n                        )\n                        af.event\n                    )\n\n                  )\n              )\n          ]\n      ]\n";
export const helloWorldCodeURL = "module Examples.HelloWorldCode where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody (text \"Hello world\")\n";
export const insertingInADifferentOrderURL = "module Examples.InsertingInADifferentOrder where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Foldable (for_, traverse_)\nimport Data.Int (floor)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple (Tuple(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (cb, (:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useDyn_, useState, useState')\nimport Deku.Listeners (click, keyUp)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (sampleBy, stepNE)\nimport Web.Event.Event (target)\nimport Web.HTML (window)\nimport Web.HTML.HTMLInputElement (fromEventTarget, value, valueAsNumber)\nimport Web.HTML.Window (alert)\nimport Web.UIEvent.KeyboardEvent (code, toEvent)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm\"\"\"\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setPos /\\ pos <- useState 0\n  setItem /\\ item <- useState'\n  setInput /\\ input <- useState'\n  let\n    guardAgainstEmpty e = do\n      v <- value e\n      if v == \"\" then\n        window >>= alert \"Item cannot be empty\"\n      else setItem v\n    top =\n      D.div_\n        [ D.input\n            [ D.Value := \"Tasko primo\"\n            , keyUp \\evt -> do\n                when (code evt == \"Enter\") $\n                  for_\n                    ((target >=> fromEventTarget) (toEvent evt))\n                    guardAgainstEmpty\n            , D.SelfT := setInput\n            , klass inputKls\n            ]\n            []\n        , D.input\n            [ klass inputKls\n            , D.Xtype := \"number\"\n            , D.Min := \"0\"\n            , D.Value := \"0\"\n            , D.OnChange := cb \\evt ->\n                traverse_ (valueAsNumber >=> floor >>> setPos) $\n                  (target >=> fromEventTarget) evt\n            ]\n            []\n        , D.button\n            [ click $ input <#> guardAgainstEmpty\n            , klass $ buttonClass \"green\"\n            ]\n            [ text \"Add\" ]\n        ]\n  D.div_\n    [ top\n    , Deku.do\n        { value: t } <- useDyn_\n          (sampleBy Tuple (stepNE pos) item)\n        D.div_ [ text t ]\n    ]\n";
export const customHook2URL = "module Examples.CustomHook2 where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Assets (cruiseURL, nicholsonURL)\nimport Deku.Attribute ((:=))\nimport Deku.Control (text)\nimport Deku.Core (Hook)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  let\n    hook1 :: Hook Boolean\n    hook1 cruise = cruise true\n\n    hook2 :: Hook Boolean\n    hook2 nicholson = nicholson true\n  r1 <- hook1\n  r2 <- hook2\n  D.div_\n    [ D.p_ [ text \"I want the \", D.code__ $ show r1, text \"th!\" ]\n    , D.img [ D.Src := cruiseURL ] []\n    , D.p_\n        [ text \"You can't handle the \"\n        , D.code__ $ show r2\n        , text \"th!\"\n        ]\n    , D.img [ D.Src := nicholsonURL ] []\n    ]\n";
export const nestedCustomHooksURL = "module Examples.NestedCustomHooks where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.NonEmpty (NonEmpty, head, tail)\nimport Data.Tuple.Nested (type (/\\), (/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (Hook)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useMemoized, useState)\nimport Deku.Listeners (click)\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Event (Event)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-pink-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-pink-700 focus:outline-none focus:ring-2\nfocus:ring-pink-500 focus:ring-offset-2 m-2\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  let\n    hookusMinimus :: Int -> Hook ((Int -> Effect Unit) /\\ NonEmpty Event Int)\n    hookusMinimus i makeHook = Deku.do\n      setMinimus /\\ minimus <- useState i\n      makeHook (setMinimus /\\ minimus)\n\n    hookusMaximus\n      :: Int\n      -> Hook ((Int -> Effect Unit) /\\ NonEmpty Event Int /\\ NonEmpty Event Int)\n    hookusMaximus i makeHook = Deku.do\n      setMinimus /\\ minimus <- hookusMinimus i\n      let added = add 1000 <$> minimus\n      maximus <- useMemoized added\n      makeHook (setMinimus /\\ minimus /\\ maximus)\n  setMinimus /\\ minimus /\\ maximus <- hookusMaximus 0\n  D.div_\n    [ D.button\n        [ klass buttonClass\n        , click $ minimus <#> (add 1 >>> setMinimus)\n        ]\n        [ text \"Increment\" ]\n    , D.div_\n        [ text \"Hookus minimus: \"\n        , text (show <$> minimus)\n        ]\n    , D.div_\n        [ text \"Hookus maximus: \"\n        , text (show <$> maximus)\n        ]\n    ]\n";
export const multipleSubscriptionsURL = "module Examples.MultipleSubscriptions where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (replicate)\nimport Data.Number.Format (fixed, toStringWith)\nimport Data.Tuple (Tuple(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, guard)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Random (random)\nimport FRP.Behavior (behavior, sample_)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i <- interval 250\n  runInBody Deku.do\n    setOnOff /\\ onOff <- useState false\n    let e = sample_ (behavior (pure (Tuple (pure unit) random))) i.event\n    D.div_\n      [ D.a\n          [ click $ onOff <#> not >>> setOnOff\n          , klass \"cursor-pointer\"\n          ]\n          [ text $ onOff <#> if _ then \"Turn me off\" else \"Turn me on\"\n          ]\n      , guard onOff $ D.div_\n          [ D.div__ \"The same event, but...\"\n          , D.div_\n              ( replicate 5\n                  ( (D.div_ <<< pure <<< text) $ e <#> toStringWith\n                      (fixed 2)\n                  )\n              )\n          ]\n      ]\n";
export const theStateHookURL = "module Examples.TheStateHook where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Random (random)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\nmain :: Effect Unit\nmain = do\n  n <- random\n  runInBody Deku.do\n    setNumber /\\ number <- useState n\n    D.div_\n      [ D.button\n          [ klass buttonClass\n          , click $ random >>= setNumber\n          ]\n          [ text \"Update number\" ]\n      , text $ number <#>\n          show >>> (\"Here's a random number: \" <> _)\n      ]\n";
export const interComponentCommunicationURL = "module Examples.InterComponentCommunication where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Foldable (for_, traverse_)\nimport Data.Int (floor)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple (Tuple(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (cb, (:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (dynOptions, useDynWith_, useState, useState')\nimport Deku.Listeners (click, keyUp)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (sampleBy, stepNE)\nimport Web.Event.Event (target)\nimport Web.HTML (window)\nimport Web.HTML.HTMLInputElement (fromEventTarget, value, valueAsNumber)\nimport Web.HTML.Window (alert)\nimport Web.UIEvent.KeyboardEvent (code, toEvent)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm\"\"\"\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setPos /\\ pos <- useState 0\n  setItem /\\ item <- useState'\n  setRemoveAll /\\ removeAll <- useState'\n  setInput /\\ input <- useState'\n  let\n    guardAgainstEmpty e = do\n      v <- value e\n      if v == \"\" then\n        window >>= alert \"Item cannot be empty\"\n      else setItem v\n    top =\n      D.div_\n        [ D.input\n            [ D.Value := \"Tasko primo\"\n            , keyUp \\evt -> do\n                when (code evt == \"Enter\") $\n                  for_\n                    ((target >=> fromEventTarget) (toEvent evt))\n                    guardAgainstEmpty\n            , D.SelfT := setInput\n            , klass inputKls\n            ]\n            []\n        , D.input\n            [ klass inputKls\n            , D.Xtype := \"number\"\n            , D.Min := \"0\"\n            , D.Value := \"0\"\n            , D.OnChange := cb \\evt ->\n                traverse_ (valueAsNumber >=> floor >>> setPos) $\n                  (target >=> fromEventTarget) evt\n            ]\n            []\n        , D.button\n            [ click $ input <#> guardAgainstEmpty\n            , klass $ buttonClass \"green\"\n            ]\n            [ text \"Add\" ]\n        ]\n  D.div_\n    [ top\n    , Deku.do\n        { value: t, sendTo, remove } <-\n          useDynWith_\n            (sampleBy Tuple (stepNE pos) item)\n            $ dynOptions { remove = const removeAll }\n        D.div_\n          [ text t\n          , D.button\n              [ klass $ \"ml-2 \" <> buttonClass \"indigo\"\n              , click (sendTo 0)\n              ]\n              [ text \"Prioritize\" ]\n          , D.button\n              [ klass $ \"ml-2 \" <> buttonClass \"pink\"\n              , click remove\n              ]\n              [ text \"Delete\" ]\n          , D.button\n              [ klass $ \"ml-2 \" <> buttonClass \"fuchsia\"\n              , click (setRemoveAll unit)\n              ]\n              [ text \"Remove all\" ]\n          ]\n    ]\n";
export const derivingBehaviorsURL = "module Examples.DerivingBehaviors where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (drop, length, null)\nimport Data.Foldable (sum)\nimport Data.Int (toNumber)\nimport Data.Number (isNaN)\nimport Data.Time.Duration (Seconds(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (derivative', sample_, stepNE)\nimport FRP.Behavior.Time (seconds)\nimport FRP.Event (fold)\nimport FRP.Event.AnimationFrame (animationFrame)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  af <- animationFrame\n  runInBody Deku.do\n    setNumber /\\ number <- useState 0.5\n    let\n      average l\n        | null l = 0.0\n        | otherwise = sum l / (toNumber $ length l)\n      unNaN n = if isNaN n then 0.0 else n\n    D.div_\n      [ D.div_\n          [ D.input\n              ( slider setNumber <>\n                  [ klass \"w-full\"\n                  , D.Min := \"0.0\"\n                  , D.Max := \"1.0\"\n                  , D.Step := \"0.01\"\n                  , D.Value := \"0.5\"\n                  ]\n              )\n              []\n          ]\n      , D.div_\n          [ text\n              ( average >>> unNaN >>> show <$>\n                  ( fold\n                      ( \\b a ->\n                          if length b < 10 then b <> [ a ]\n                          else (drop 1 b) <> [ a ]\n                      )\n                      []\n                      ( sample_\n                          ( derivative'\n                              (seconds <#> (\\(Seconds s) -> s))\n                              (stepNE number)\n                          )\n                          af.event\n                      )\n                  )\n              )\n          ]\n      ]\n";
export const solvingDifferentialEquationsURL = "module Examples.SolvingDifferentialEquations where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.NonEmpty ((:|))\nimport Data.Time.Duration (Seconds(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (sample_, solve2')\nimport FRP.Behavior.Time (seconds)\nimport FRP.Event (keepLatest)\nimport FRP.Event.AnimationFrame (animationFrame)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\"\n\nmain :: Effect Unit\nmain = do\n  af <- animationFrame\n  runInBody Deku.do\n    setThunk /\\ thunk <- useState'\n    let\n      motion = 0.0 :|\n        ( keepLatest $ thunk $>\n            ( sample_\n                ( solve2' 1.0 0.0\n                    ( seconds <#>\n                        (\\(Seconds s) -> s)\n                    )\n                    ( \\x dx'dt -> pure (-0.5) * x -\n                        (pure 0.1) * dx'dt\n                    )\n                )\n                af.event\n            )\n        )\n    D.div_\n      [ D.div_\n          [ D.button\n              [ klass buttonClass, click (setThunk unit) ]\n              [ text \"Restart simulation\" ]\n          ]\n      , D.div_\n          [ D.input\n              [ D.Xtype := \"range\"\n              , klass \"w-full\"\n              , D.Min := \"-1.0\"\n              , D.Max := \"1.0\"\n              , D.Step := \"0.01\"\n              , D.Value := (show <$> motion)\n              ]\n              []\n          ]\n      ]\n";
export const usingTheHookInAnAttributeURL = "module Examples.UsingTheHookInAnAttribute where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute ((:=))\nimport Deku.Attributes (href, klass, style)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"ml-4 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setHrefSwitch /\\ hrefSwitch <- useState false\n  setStyleSwitch /\\ styleSwitch <- useState false\n  D.div_\n    [ D.a\n        [ D.Target := \"_blank\"\n        , href $ hrefSwitch <#>\n            if _ then \"https://cia.gov\" else \"https://fbi.gov\"\n        , style $ styleSwitch <#>\n            if _ then \"color:magenta;\" else \"color:teal;\"\n        ]\n        [ text \"Click me\" ]\n    , D.button\n        [ klass $ buttonClass \"indigo\"\n        , click $ hrefSwitch <#> not >>> setHrefSwitch\n        ]\n        [ text \"Switch href\" ]\n    , D.button\n        [ klass $ buttonClass \"green\"\n        , click $ styleSwitch <#> not >>> setStyleSwitch\n        ]\n        [ text \"Switch style\" ]\n    ]\n";
export const passingAroundHooksURL = "module Examples.PassingAroundHooks where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (guard, useState, useState')\nimport Deku.Listeners (click)\nimport Deku.NonEmpty (rehead)\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport FRP.Behavior (stepNE, (>@=))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setIncrementer /\\ incrementer <- useState'\n  setGoodbye /\\ goodbye <- useState true\n  D.div_\n    [ D.a\n        [ klass \"cursor-pointer\"\n        , click\n            $\n              ( incrementer >@=\n                  \\{ setNumber, number } -> stepNE number <#>\n                    { setNumber, n: _ }\n              ) <#>\n                (\\{ n, setNumber } -> setNumber (1 + n))\n        ]\n        [ text \"Increment\" ]\n    , D.div_\n        [ D.a\n            [ klass \"cursor-pointer\"\n            , click (setGoodbye false)\n            ]\n            [ text \"Goodbye\" ]\n        ]\n    , D.div_\n        [ guard goodbye Deku.do\n            setNumber /\\ number <- useState 0\n            D.div_\n              [ D.div_\n                  [ text (number <#> show >>> (\"n = \" <> _))\n                  ]\n              , D.div_\n                  [ D.a\n                      [ klass \"cursor-pointer\"\n                      , ( click $ number <#> \\n ->\n                            ( setIncrementer\n                                { setNumber, number: rehead n number }\n                            )\n                        )\n                      ]\n                      [ text \"Cede control\" ]\n                  ]\n              ]\n        ]\n    ]\n";
export const switchingOnBehaviorsURL = "module Examples.SwitchingOnBehaviors where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.DateTime.Instant (unInstant)\nimport Data.Newtype (unwrap)\nimport Data.Number ((%))\nimport Data.Tuple (Tuple(..))\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Random (random)\nimport FRP.Behavior (behavior, sample_, switcher)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i0 <- interval 250\n  i1 <- interval 2000\n  runInBody do\n    let\n      b i = behavior\n        $ pure (Tuple (pure unit) (mul i <$> random))\n    text\n      ( show <$>\n          ( sample_\n              ( switcher (b 1.0)\n                  ( i1.event <#> \\i -> b\n                      (((unwrap $ unInstant i) / 1000.0) % 1.0)\n                  )\n              )\n              i0.event\n          )\n      )\n";
export const groupingComponentsURL = "module Examples.GroupingComponents where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (fixed)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody do\n  let\n    eieio = fixed\n      [ D.span [ klass \"text-blue-400\" ] [ text \"e \" ]\n      , D.span [ klass \"text-red-400\" ] [ text \"i \" ]\n      , D.span [ klass \"text-green-400\" ] [ text \"e \" ]\n      , D.span [ klass \"text-teal-400\" ] [ text \"i \" ]\n      , D.span [ klass \"text-orange-400\" ] [ text \"o\" ]\n      ]\n\n  D.div_\n    [ text \"Old MacDonald had a farm, \"\n    , eieio\n    , text \". And on that farm he had a dog, \"\n    , eieio\n    , text\n        \". With a woof-woof here and a woof-woof there. \"\n    , text \"Here a woof, there a woof, everywhere a woof-woof. \"\n    , text \"Old MacDonald had a farm, \"\n    , eieio\n    , text \".\"\n    ]\n";
export const flippingTheFunctionAndArgumentURL = "module Examples.FlippingTheFunctionAndArgument where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.Core (fixed)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (slider)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event.Class ((<**|>))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setSlider1 /\\ slider1 <- useState'\n  setSlider2 /\\ slider2 <- useState'\n  fixed\n    [ D.div [ klass \"flex justify-around\" ]\n        [ D.input (slider setSlider1) []\n        , D.input (slider setSlider2) []\n        ]\n    , text\n        ( slider1 <**|>\n            ((\\a b -> show b <> \" \" <> show a) <$> slider2)\n        )\n    ]\n";
export const movingElementsURL = "module Examples.MovingElements where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Foldable (for_, traverse_)\nimport Data.Int (floor)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple (Tuple(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (cb, (:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useDyn_, useState, useState')\nimport Deku.Listeners (click, keyUp)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (sampleBy, stepNE)\nimport Web.Event.Event (target)\nimport Web.HTML (window)\nimport Web.HTML.HTMLInputElement (fromEventTarget, value, valueAsNumber)\nimport Web.HTML.Window (alert)\nimport Web.UIEvent.KeyboardEvent (code, toEvent)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm\"\"\"\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setPos /\\ pos <- useState 0\n  setItem /\\ item <- useState'\n  setInput /\\ input <- useState'\n  let\n    guardAgainstEmpty e = do\n      v <- value e\n      if v == \"\" then\n        window >>= alert \"Item cannot be empty\"\n      else setItem v\n    top =\n      D.div_\n        [ D.input\n            [ D.Value := \"Tasko primo\"\n            , keyUp \\evt -> do\n                when (code evt == \"Enter\") $\n                  for_\n                    ((target >=> fromEventTarget) (toEvent evt))\n                    guardAgainstEmpty\n            , D.SelfT := setInput\n            , klass inputKls\n            ]\n            []\n        , D.input\n            [ klass inputKls\n            , D.Xtype := \"number\"\n            , D.Min := \"0\"\n            , D.Value := \"0\"\n            , D.OnChange := cb \\evt ->\n                traverse_ (valueAsNumber >=> floor >>> setPos) $\n                  (target >=> fromEventTarget) evt\n            ]\n            []\n        , D.button\n            [ click $ input <#> guardAgainstEmpty\n            , klass $ buttonClass \"green\"\n            ]\n            [ text \"Add\" ]\n        ]\n  D.div_\n    [ top\n    , Deku.do\n        { value: t, sendTo } <- useDyn_\n          (sampleBy Tuple (stepNE pos) item)\n        D.div_\n          [ text t\n          , D.button\n              [ klass $ \"ml-2 \" <> buttonClass \"indigo\"\n              , click (sendTo 0)\n              ]\n              [ text \"Prioritize\" ]\n          ]\n    ]\n";
export const mockDiscordURL = "module Examples.MockDiscord where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Assets (beluMomURL, belugaURL)\nimport Control.Plus (empty)\nimport Data.These (These(..))\nimport Deku.Attribute (class Attr, Attribute, AttributeValue(..), unsafeAttribute, (:=))\nimport Deku.Control (text)\nimport Deku.Core (Nut)\nimport Deku.DOM (unsafeCustomElement)\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\ndata DiscordMessages_\ndata DiscordMessage_\ndata Author = Author\ndata Avatar = Avatar\ndata RoleColor = RoleColor\n\ninstance Attr DiscordMessage_ Author String where\n  attr _ s = unsafeAttribute\n    $ This { key: \"author\", value: Prop' s }\n\ninstance Attr DiscordMessage_ Avatar String where\n  attr _ s = unsafeAttribute\n    $ This { key: \"avatar\", value: Prop' s }\n\ninstance Attr DiscordMessage_ RoleColor String where\n  attr _ s = unsafeAttribute\n    $ This { key: \"role-color\", value: Prop' s }\n\ndiscordMessages\n  :: Array Nut\n  -> Nut\ndiscordMessages = unsafeCustomElement \"discord-messages\"\n  ( Proxy\n      :: Proxy\n           DiscordMessages_\n  )\n  empty\n\ndiscordMessage\n  :: Array (Attribute DiscordMessage_)\n  -> Array Nut\n  -> Nut\ndiscordMessage = unsafeCustomElement \"discord-message\"\n  ( Proxy\n      :: Proxy\n           DiscordMessage_\n  )\n\nmain :: Effect Unit\nmain = runInBody do\n  discordMessages\n    [ discordMessage\n        [ Author := \"beluga\"\n        , Avatar := belugaURL\n        ]\n        [ text \"mom\" ]\n    , discordMessage\n        [ Author := \"belu-mom\ud83c\udf38\"\n        , Avatar := beluMomURL\n        ]\n        [ text \"yes beluga\" ]\n    , discordMessage\n        [ Author := \"beluga\"\n        , Avatar := belugaURL\n        ]\n        [ text \"whos my dad?\" ]\n    , discordMessage\n        [ Author := \"belu-mom\ud83c\udf38\"\n        , Avatar := beluMomURL\n        ]\n        [ text \"it's complicated...\" ]\n    ]\n";
export const runningAffsInResponseToAnEventURL = "module Examples.RunningAffsInResponseToAnEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (launchAff_)\nimport Effect.Class (liftEffect)\nimport Fetch (Method(..), fetch)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setResponse /\\ response <- useState'\n  D.div_\n    [ D.a\n        [ click $ launchAff_ do\n            { text: t } <- fetch \"https://httpbin.org/post\"\n              { method: POST\n              , body: \"\"\"{\"hello\":\"world\"}\"\"\"\n              , headers: { \"Content-Type\": \"application/json\" }\n              }\n            t' <- t\n            liftEffect $ setResponse t'\n        , klass \"cursor-pointer\"\n        ]\n        [ text \"Click for a random http response\" ]\n    , text \": \"\n    , text (show <$> response)\n    ]\n";
export const samplingABehaviorWithACustomFunctionURL = "module Examples.SamplingABehaviorWithACustomFunction where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Affjax.ResponseFormat as ResponseFormat\nimport Affjax.Web as AX\nimport Control.Monad.ST.Class (liftST)\nimport Control.Monad.ST.Internal (new, read, write)\nimport Data.Argonaut.Core (stringifyWithIndent)\nimport Data.Either (Either(..))\nimport Data.Tuple (Tuple(..))\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport Effect.Aff (error, killFiber, launchAff)\nimport FRP.Behavior (behavior, sampleBy)\nimport FRP.Event.Time (interval)\nimport Fetch (Method(..))\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i <- interval 7562\n  runInBody do\n    text\n      ( sampleBy (flip append)\n          ( behavior\n              ( do\n                  fiber <- new (pure unit)\n                  value <- new \"Fetching...\"\n                  pure $ Tuple (pure unit) do\n                    fb <- launchAff do\n                      f <- liftST $ read fiber\n                      killFiber (error \"cancelling\") f\n                      result <- AX.request\n                        ( AX.defaultRequest\n                            { url = \"https://randomuser.me/api/\"\n                            , method = Left GET\n                            , responseFormat = ResponseFormat.json\n                            }\n                        )\n                      let ff s = liftST $ void $ write s value\n                      case result of\n                        Left err -> ff (AX.printError err)\n                        Right response -> ff\n                          (stringifyWithIndent 2 response.body)\n                    liftST $ void $ write fb fiber\n                    o <- liftST $ read value\n                    pure (\"Here's a random user: \" <> o)\n              )\n          )\n\n          (i.event $> \"Here's a random user: \")\n      )\n";
export const memoizedApplicationURL = "module Examples.MemoizedApplication where\n\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (intercalate, replicate)\nimport Data.Tuple (fst, snd)\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useMemoized, useState)\nimport Deku.Listeners (click)\nimport Deku.NonEmpty ((<**>))\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  aa <- useState true\n  bb <- useState false\n  cc <- useState true\n  dd <- useState false\n  ee <- useState true\n  composedEvent <- useMemoized\n    ( { a: _, b: _, c: _, d: _, e: _ }\n        <$> snd aa\n          <**> snd bb\n          <**> snd cc\n          <**> snd dd\n          <**> snd ee\n    )\n  D.div_\n    [ D.div_\n        ( map\n            ( \\i -> D.a\n                [ click $ snd i <#> not >>> fst i\n                , klass \"cursor-pointer\"\n                ]\n                [ text \"Click me \" ]\n            )\n            [ aa, bb, cc, dd, ee ]\n        )\n    , D.div_\n        ( replicate 10\n            ( D.div_\n                [ text $\n                    ( composedEvent\n                        <#> \\{ a, b, c, d, e } ->\n                          intercalate \" \" $ map show\n                            [ a, b, c, d, e ]\n                    )\n                ]\n            )\n        )\n    ]\n";
export const memoizedNoEventURL = "module Examples.MemoizedNoEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Array (replicate)\nimport Data.Foldable (traverse_)\nimport Data.Int (floor, pow)\nimport Data.NonEmpty ((:|))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (cb, (:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useMemoized')\nimport Deku.Toplevel (runInBody)\n\nimport Web.Event.Event (target)\nimport Web.HTML.HTMLInputElement (fromEventTarget, valueAsNumber)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setNumber /\\ number <- useMemoized' (map (_ `pow` 2))\n  D.div_\n    [ D.div_\n        [ D.input\n            [ klass inputKls\n            , D.Xtype := \"number\"\n            , D.Min := \"0\"\n            , D.Max := \"100\"\n            , D.Value := \"0\"\n            , D.OnChange := cb \\evt ->\n                traverse_ (valueAsNumber >=> floor >>> setNumber) $\n                  (target >=> fromEventTarget) evt\n            ]\n            []\n        ]\n    , D.div_\n        ( replicate 200 $ D.span_\n            [ text (show >>> (_ <> \" \") <$> (0 :| number)) ]\n        )\n    ]\n";
export const whenToFixAndWhenToFoldURL = "module Examples.WhenToFixAndWhenToFold where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Either (hush)\nimport Data.NonEmpty ((:|))\nimport Data.Tuple (snd)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useDynAtBeginning_, useState', (<#~>))\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event (delay, filterMap, fix, keepLatest, once)\nimport QualifiedDo.Alt as Alt\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setSwitch /\\ switch <- useState'\n  D.div_\n    [ D.div_\n        [ D.button\n            [ click (setSwitch unit)\n            , klass buttonClass\n            ]\n            [ text $ \"Start simulation\" :| (switch $> \"Restart simulation\")\n            ]\n        ]\n    , switch <#~> \\_ -> D.div [ klass \"h-24 overflow-y-scroll\" ]\n        [ Deku.do\n            _ <- useDynAtBeginning_\n              ( fix\n                  ( \\e -> Alt.do\n                      keepLatest $ e <#> \\n -> do\n                        let t = if n >= 375 then 15 else n + 15\n                        filterMap (hush >>> map snd) $ delay t\n                          (once switch $> t)\n                      once switch $> 0\n                  )\n              )\n            text \"\u2022\u200b\"\n        ]\n    ]\n";
export const usingAHookToControlPresenceURL = "module Examples.UsingAHookToControlPresence where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState, guard)\nimport Deku.Attributes (klass)\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setPresence /\\ presence <- useState true\n  D.div_\n    [ guard presence (text \"Now you see me, \")\n    , D.a\n        [ klass \"cursor-pointer\"\n        , click $ presence <#> not >>> setPresence\n        ]\n        [ text $ presence <#>\n            if _ then \"now you don't.\" else \"Oops, come back!\"\n        ]\n    ]\n";
export const purityOutOfThinAirURL = "module Examples.PurityOutOfThinAir where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Apply (lift2)\nimport Control.Plus (empty)\nimport Data.Array (intercalate)\nimport Data.Monoid.Endo (Endo(..))\nimport Data.Newtype (unwrap)\nimport Deku.Control (text)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event (fold)\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i0 <- interval 804\n  i1 <- interval 1222\n  i2 <- interval 568\n  let endoS s = Endo (map (_ <> s))\n  let endoE e = Endo (flip (lift2 (<>)) e)\n  runInBody do\n    let\n      alternate e a b =\n        map\n          (if _ then a else b)\n          (fold (pure <$> not) true e)\n    text\n      $ unwrap\n          ( intercalate (endoS \" \")\n              [ endoE $ alternate i0.event \"Functional\" \"Imperative\"\n              , endoS \"programming\"\n              , endoE $ alternate i1.event \"is\" \"isn't\"\n              , endoE $ alternate i2.event \"fun!\" \"boring!\"\n              ]\n          )\n          empty\n";
export const removingElementsURL = "module Examples.RemovingElements where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Foldable (for_, traverse_)\nimport Data.Int (floor)\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple (Tuple(..))\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attribute (cb, (:=))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useDyn_, useState, useState')\nimport Deku.Listeners (click, keyUp)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (sampleBy, stepNE)\nimport Web.Event.Event (target)\nimport Web.HTML (window)\nimport Web.HTML.HTMLInputElement (fromEventTarget, value, valueAsNumber)\nimport Web.HTML.Window (alert)\nimport Web.UIEvent.KeyboardEvent (code, toEvent)\nimport Deku.Toplevel (runInBody)\n\ninputKls :: String\ninputKls =\n  \"\"\"rounded-md\nborder-gray-300 shadow-sm\nborder-2 mr-2\nborder-solid\nfocus:border-indigo-500 focus:ring-indigo-500\nsm:text-sm\"\"\"\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setPos /\\ pos <- useState 0\n  setItem /\\ item <- useState'\n  setInput /\\ input <- useState'\n  let\n    guardAgainstEmpty e = do\n      v <- value e\n      if v == \"\" then\n        window >>= alert \"Item cannot be empty\"\n      else setItem v\n    top =\n      D.div_\n        [ D.input\n            [ D.Value := \"Tasko primo\"\n            , keyUp \\evt -> do\n                when (code evt == \"Enter\") $\n                  for_\n                    ((target >=> fromEventTarget) (toEvent evt))\n                    guardAgainstEmpty\n            , D.SelfT := setInput\n            , klass inputKls\n            ]\n            []\n        , D.input\n            [ klass inputKls\n            , D.Xtype := \"number\"\n            , D.Min := \"0\"\n            , D.Value := \"0\"\n            , D.OnChange := cb \\evt ->\n                traverse_ (valueAsNumber >=> floor >>> setPos) $\n                  (target >=> fromEventTarget) evt\n            ]\n            []\n        , D.button\n            [ click $ input <#> guardAgainstEmpty\n            , klass $ buttonClass \"green\"\n            ]\n            [ text \"Add\" ]\n        ]\n  D.div_\n    [ top\n    , Deku.do\n        { value: t, sendTo, remove } <- useDyn_\n          (sampleBy Tuple (stepNE pos) item)\n        D.div_\n          [ text t\n          , D.button\n              [ klass $ \"ml-2 \" <> buttonClass \"indigo\"\n              , click (sendTo 0)\n              ]\n              [ text \"Prioritize\" ]\n          , D.button\n              [ klass $ \"ml-2 \" <> buttonClass \"pink\"\n              , click remove\n              ]\n              [ text \"Delete\" ]\n          ]\n    ]\n";
export const handRolledEventURL = "module Examples.HandRolledEvent where\n\nimport Deku.Toplevel (runInBody')\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Control.Monad.Error.Class (throwError)\nimport Data.Maybe (maybe)\nimport Effect (Effect)\nimport Effect.Exception (error)\nimport Effect.Random (random)\nimport Effect.Ref (new, read, write)\nimport Effect.Timer (clearInterval, setInterval)\nimport ExampleAssitant (ExampleSignature)\nimport Web.DOM.Document (createElement, createTextNode)\nimport Web.DOM.Element (setAttribute, toEventTarget, toNode)\nimport Web.DOM.Node (appendChild, setTextContent)\nimport Web.DOM.Text as TN\nimport Web.Event.Event (EventType(..))\nimport Web.Event.EventTarget (addEventListener, eventListener)\nimport Web.HTML (window)\nimport Web.HTML.HTMLDocument (body, toDocument)\nimport Web.HTML.HTMLElement as HTMLElement\nimport Web.HTML.Window (document)\nimport Deku.Toplevel (runInBody)\n\ntype Event a = (a -> Effect Unit) -> Effect (Effect Unit)\n\nmain :: Effect Unit\nmain = do\n  bod <- window >>= document >>= body >>= maybe\n    (throwError $ error \"Could not find body\")\n    pure\n  doc <- window >>= document <#> toDocument\n  anchor <- createElement \"a\" doc\n  setAttribute \"class\" \"cursor-pointer\" anchor\n  setTextContent \"Turn on event\" (toNode anchor)\n  txt <- createTextNode \" \" doc\n  div <- createElement \"div\" doc\n  setAttribute \"style\" \"hidden\" div\n  appendChild (toNode anchor) (HTMLElement.toNode bod)\n  appendChild (TN.toNode txt) (HTMLElement.toNode bod)\n  appendChild (toNode div) (HTMLElement.toNode bod)\n  onOff <- new false\n  unsubscribe <- new (pure unit)\n  let\n    (event :: Event Number) = \\callback -> do\n      random >>= callback\n      i <- setInterval 400 do\n        random >>= callback\n      pure do\n        clearInterval i\n  el <- eventListener \\_ -> do\n    read onOff >>= case _ of\n      false -> do\n        u <- event \\v -> setTextContent (show v) (toNode div)\n        write u unsubscribe\n        write true onOff\n        setTextContent \"Turn off event\" (toNode anchor)\n      true -> do\n        u <- read unsubscribe\n        u\n        write false onOff\n        setTextContent \"Turn on event\" (toNode anchor)\n  addEventListener (EventType \"click\") el true\n    (toEventTarget anchor)\n  pure (pure unit)\n";
export const unsafeCustomElementURL = "module Examples.UnsafeCustomElement where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Deku.Control (text)\nimport Deku.DOM (unsafeCustomElement)\nimport Deku.Toplevel (runInBody)\n\nimport Type.Proxy (Proxy(..))\nimport Deku.Toplevel (runInBody)\n\ndata MyNiftyAnchor_\n\nmain :: Effect Unit\nmain = runInBody do\n  unsafeCustomElement \"a\" (Proxy :: _ MyNiftyAnchor_) []\n    [ text \"hi\" ]\n";
export const severalLagsUsingFixURL = "module Examples.SeveralLagsUsingFix where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Data.Compactable (compact)\nimport Data.Maybe (Maybe(..))\nimport Data.NonEmpty ((:|))\nimport Data.String (Pattern(..), Replacement(..), replaceAll)\nimport Data.Tuple (Tuple(..), fst, snd)\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Behavior (sample, step)\nimport FRP.Event (fix)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass :: String -> String\nbuttonClass color =\n  replaceAll (Pattern \"COLOR\") (Replacement color)\n    \"\"\"mb-3 inline-flex items-center rounded-md\nborder border-transparent bg-COLOR-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-COLOR-700 focus:outline-none focus:ring-2\nfocus:ring-COLOR-500 focus:ring-offset-2 mr-4\"\"\"\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setWord /\\ word <- useState'\n  let\n    lag n e\n      | n <= 0 = e\n      | otherwise =\n          compact $ snd <$> fix\n            ( \\ev -> sample\n                (step Nothing (fst <$> ev))\n                ((Tuple <<< Just) <$> lag (n - 1) e)\n            )\n    button txt color = D.button\n      [ klass (buttonClass color), click (setWord txt) ]\n      [ text txt ]\n  D.div_\n    [ D.div_ $\n        [ button \"Hickory\" \"green\"\n        , button \"Dickory\" \"pink\"\n        , button \"Dock\" \"indigo\"\n        ]\n    , D.div_ $ [ 0, 1, 2, 3, 4 ] <#> \\n -> D.div_\n        [ text $ \"Word with a lag of \" <> show n <> \": \"\n        , text (\"None\" :| lag n word)\n        ]\n    ]\n";
export const eventsAsSemigroupsURL = "module Examples.EventsAsSemigroups where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport Deku.Toplevel (runInBody)\n\nimport Data.Tuple.Nested ((/\\))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Do as Deku\nimport Deku.Hooks (useState')\nimport Deku.Listeners (click)\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nbuttonClass =\n  \"\"\"inline-flex items-center rounded-md\nborder border-transparent bg-indigo-600 px-3 py-2\ntext-sm font-medium leading-4 text-white shadow-sm\nhover:bg-indigo-700 focus:outline-none focus:ring-2\nfocus:ring-indigo-500 focus:ring-offset-2 mr-6\"\"\" :: String\n\nmain :: Effect Unit\nmain = runInBody Deku.do\n  setKlass1 /\\ klass1 <- useState'\n  setKlass2 /\\ klass2 <- useState'\n  let\n    button setter txt = D.button\n      [ klass buttonClass, click (setter txt) ]\n      [ text txt ]\n  D.div_\n    [ D.div_ $\n        [ button setKlass1 \"text-2xl\"\n        , button setKlass1 \"text-sm\"\n        , button setKlass2 \"text-orange-500\"\n        , button setKlass2 \"text-green-300\"\n        ]\n    , D.div_\n        [ D.span\n            [ klass \"text-sm text-green-500\"\n            , klass ((klass1 <#> (_ <> \" \")) <> klass2)\n            ]\n            [ text \"Hello!\" ]\n        ]\n    ]\n";
export const altAsAMuxerURL = "module Examples.AltAsAMuxer where\n\nimport Deku.Toplevel (runInBody')\nimport Effect (Effect)\nimport Prelude\nimport ExampleAssitant (ExampleSignature)\nimport Deku.Toplevel (runInBody)\n\nimport Control.Alt ((<|>))\nimport Deku.Attributes (klass)\nimport Deku.Control (text)\nimport Deku.DOM as D\nimport Deku.Toplevel (runInBody)\n\nimport FRP.Event.Time (interval)\nimport Deku.Toplevel (runInBody)\n\nmain :: Effect Unit\nmain = do\n  i0 <- interval 200\n  i1 <- interval 165\n  runInBody do\n    D.div\n      [ klass\n          ( (i0.event $> \"bg-pink-300\")\n              <|> (i1.event $> \"bg-green-300\")\n          )\n      ]\n      [ text \"Par-tay!\" ]\n";
